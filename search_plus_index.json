{"./":{"url":"./","title":"欢迎加入端点大家庭","keywords":"","body":"Introduction 亲爱的新同学们，请允许我们用最朴素又是最真诚的话语开头： 首先对你的到来表示热烈的欢迎，欢迎加入端点网络科技！相信在决定加入我们这个创业团队的时候，你是认真慎重的、也是经过了深思熟虑的，因此，你对端点一定已经有所了解。我们虽然只有数百人，但我们牛人辈出；我们虽然还是小公司，但却是资本市场的香饽饽；我们虽然有时干活很辛苦，但我们希望每个同学都是快乐的；我们虽然还没实现财务自由，但我们的目标是在昂贵的杭州给每个同学一个温暖的家。这就是我们，简单的我们，真诚的我们，开放的我们，那么，年轻的你，好奇的你，对未来充满期待的你，胸怀大志的你，欢迎加入端点科技 在端点科技开心工作每一天！ 你需要的一切生活指导， 上下班时间 如何坐班车上下班 如何领取办公用品 如何 都可以看《新员工手册2018版》 提取码:E0pd Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 16:06:34 "},"docs/business.html":{"url":"docs/business.html","title":"初识端点业务","keywords":"","body":"初识端点业务 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 11:36:33 "},"docs/resources.html":{"url":"docs/resources.html","title":"端点资源大汇总","keywords":"","body":"Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 17:46:21 "},"docs/mac.html":{"url":"docs/mac.html","title":"mac环境配置","keywords":"","body":"mac环境配置 工欲善其事，必先利其器，工具永远都是用来解决问题的，没必要为了工具而工具，一切工具都是为了能快速准确的完成工作和学习任务而服务。 拿到公司配的MacPro之后，第一步需要做的，就是把开发环境搭建起来。一些基础通用的工具可以参考这篇文章配置：高效 MacBook 工作环境配置 在端点后端开发必备的几个工具： IDEA For Mac：建议官网下载，并且激活。 Maven：官网下载，并且配置maven.setting。端点有自己的nexus私仓，所以需要下载相应的setting(提取密码: I31N)。 Visual Paradigm: 用于画设计图，用例图、时序图、类图等。在阿里郎里面下载，阿里郎下载参考员工手册。 Sequal Pro：阿里郎中下载 SourceTree：git客户端 Git、Git-Flow：直接使用brew下载 Java环境：放在最后是因为，我觉得总没人会忘记吧。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-08 09:11:03 "},"docs/work-flow.html":{"url":"docs/work-flow.html","title":"工作流程","keywords":"","body":"端点工作流程 通常都是我们衣食父母 市场部同学接到一个项目，然后我们就开始苦逼的项目工作了。。 1、项目群：通常市场/PD同学都会拉一个项目的钉钉群，如果你半途加入项目，首先就是要找人拉你进群。大部分的资料都可以在群里面找到。2、常用工具：如果你加入了一个项目，你会拿到几个地址： 代码地址：gitlab。如果已经是在开发阶段了，你应该会收到一个代码的Clone地址。怎么登录？员工手册上是这么写的： 1、GIT账户适用人群：前端开发／后端开发／产品经理／设计师／测试如何申请：1、 用公司邮箱去account.terminus.io注册2、 去git.terminus.io点登陆下面的Sign with terminus如何访问：成功申请后会收到确认邮件，首次登录后可能会需要修改密码访问 Gitlab输入用户名/密码登录 后点击登录 2、申请用户中心账户用户中心是用来访问我司内部系统的单点登录系统，目前集成了Paas以及Pmp系统适用人群：前端开发／后端开发／产品经理／设计师／测试如何申请：访问 http://account.terminus.io/， 用户中心注册页面, 使用公司邮箱注册账号。注册成功后通过访问 account.terminus.io输入用户名/密码登录 后点击登录 文档资料地址：语雀。看不到资料怎么办？ 说明你还没加入项目，快找你的主管申请吧。 任务地址：PMP。任务记得一定得及时更新，接到任务确认需求后点接受，开始设计时点进行中，开发完成后点已完成。 3、PMP使用：当你参与到一个项目，你可以在PMP中接到你需要完成的任务，PMP的使用很简单，但是一定得记得——及时反馈。PMP的作用就是通过流程化的方式去推进项目，减少不必要的沟通，使得开发、开发负责人、测试都可以在上面了解所有团队成员的进度。因此千万不要等到开发任务都完成了，才去点击接受任务。（不过这种情况，要不是PMP没有起到应有的作用，大家都是钉钉问来问去。要不是你得主管已经被你气晕，无力再问你） 4、功能设计：作为一个后端开发工程师，你需要了解你负责域的需求，因此你要仔细研读PRD、了解原型图(有些会在群里，有些可能在语雀上面)，并且根据这些需求去做模块设计。模块设计要做哪些内容，模板有没有？请参考 Promotion设计(密码: abV3)、接口设计(密码: dmdL)。 5、设计评审：做完设计后，通常需要主要邀请下相关的同学进行评审，评审通过后再开始开发。所以别太心急，就算你分分钟写完后也会被推翻。 6、代码开发：设计评审完毕后，就该开始开发了。端点有一个总的开发规范，不同项目也有自己一些细化的规范。见《端点开发规范》 7、代码评审：开发完毕后，提测之前你需要邀请同事、主管进行代码评审，确保自己代码提测的质量，减轻测试的工作量。git的流程不同团队貌似还是有所区别，我当前参与的项目是你提Merge Request（在gitlab尚提）到develop，然后备注你自己的功能。 8、提交测试：Merge完毕后，需要PAAS环境去部署到测试环境。部署完毕后在群里通知测试，接下来就等待测试同学的测试结果。Bug还是会提交到PMP，你可以安心做其他开发工作，当收到Bug之后，钉钉会有通知的。 [success] 以下是我的建议理想的绩效源自于良好的工作习惯 9、充分沟通：不要简单的提交代码，建议和测试进行充分的沟通，告知你觉得需要重点测试的地方、有风险的地方。这个不单单是为了测试能更快、更有效率的发现问题，更是为了你得KPI考虑。交付故障级别 || 关键质量流程 10、主动承担：所有任务开发完毕，无论是提前还是按期，主动的通知负责人，主动承担新的责任推进项目。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 17:59:36 "},"docs/coding.html":{"url":"docs/coding.html","title":"开发规范","keywords":"","body":"开发规范 良好的代码规范可以提高团队编码、review的效率，保证项目质量，端点有一个总的开发规范。 每个项目也在此基础上制定更细化的开发规范。 代码规范 基础代码规范配置 代码编写完,使用IDEA自带格式化代码快捷格式化下代码,mac默认快捷键: ALT + COMMAND + L 安装lombok插件，简化set、get方法 使用DSL风格代码模板和避免空字符打印 右键选择Generate,选择Setter选项 选择新建DSL风格Template,伪代码如下 #set($paramName = $helper.getParamName($field, $project)) public ## #if($field.modifierStatic) static void ## #else $classname ## #end $StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))($field.type $paramName) { #if ($field.name == $paramName) #if (!$field.modifierStatic) this.## #else $classname.## #end #end $field.name = $paramName; #if(!$field.modifierStatic) return this; #end } model方法中配合静态create方法，使用DSL风格可以相当简洁明了的进行对象的创建赋值工作，如下所示: public static MemberProfile create() { return new MemberProfile(); } public MemberProfile id(Long id) { this.id = id; return this; } public MemberProfile nickname(String nickname) { this.nickname = nickname; return this; } MemberProfile.create().id(1L).nickname(\"test\") 同样的方式重新建立toString模板，避免属性为空的输出 public String toString() { #set ($autoImportPackages = \"com.google.common.base.MoreObjects\") return MoreObjects.toStringHelper(this) #foreach ($member in $members) .add(\"$member.name\", $member.accessor) #end .omitNullValues() .toString(); } checkStyle的使用 在idea中选择File->Setting->Plugins，搜索checkStyle-IDEA插件，点击安装 在File->Other Settings里面配置添加checkstyle.xml(checkstyle.xml见git仓库)， 下载地址：https://space.dingtalk.com/s/gwHOABHuiwLOAQtfDAPaACBiNGYzYmM3NTE0YjU0NzRlOTQxMjRiNDVkY2FhZjliZQ 密码: uJCm 如下图 Swagger的使用 Swagger可以使人和计算机在看不到源码或者看不到文档或者不能通过网络流量检测的情况下能发现和理解各种服务的功能，更加容易理解和调用接口，如下图: maven中直接添加如下依赖即可: io.swagger swagger-annotations 1.5.10 io.terminus.boot terminus-spring-boot-starter-swagger 1.6.2.BUILD-SNAPSHOT 流程规范 合并多个commit为一个commit 目前在分支开发功能时，可能会提交多次，便会造成分支上面有多个commit。这时不论是使用cherry-pick移植功能，还是rebase，都会比较繁琐。所以要求大家分支合并之前都合并为一个提交。 在sourceTree上选择分支，将当前分支备份 切换原有分支，sourceTree勾选当前分支，仅首个父级 找到该分支最初提交commit的上一个节点，sourceTree上右键，选择将分支重置到该节点提交 使用混合合并模式，点击确定 将所有本地变动文件提交，并使用git push -f命令，强制将本地分支提交替代远程分支 由于分支回退到最初节点之后，由于所有的修改记录文件都已经保存在本地，混合合并不会造成修改文件丢失。此时再将文件提交，所有的修改就变成一个commit，使用-f命令，即用本地分支替代了远程分支。 git rebase操作 Git 作为分布式版本控制系统，所有修改操作都是基于本地的，在团队协作过程中，假设你和你的同伴在本地中分别有各自的新提交，而你的同伴先于你 push 了代码到远程分支上，所以你必须先执行 git pull 来获取同伴的提交，然后才能 push 自己的提交到远程分支。而按照 Git 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话，Git 会执行一次 merge 操作，因此产生一次没意义的提交记录，进而会造主线分支的杂乱。故当前要求大家提交到主线的时候，必须做一次rebase操作 假设需要rebase的分支为feature/demo,主线为master(第一次rebase的时候，建议备份下自己的分支) git pull master获取最新主线代码 切到feature/demo分支，使用git rebase master命令 如有冲突，则解决完冲突，git add .暂存下(不需要提交)，若无冲突，则执行 git rebase --continue rebase完成后，这个时候本地分支会与远程分支有版本冲突，不用管，直接git push -f Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 18:07:45 "},"docs/technology.html":{"url":"docs/technology.html","title":"技术架构","keywords":"","body":"技术架构 后端的技术栈可以参考之前同事整理的： http://docs.terminus.io/backend/intro/ Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-05-07 18:09:44 "}}